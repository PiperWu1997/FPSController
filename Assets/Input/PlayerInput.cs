//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
  ""name"": ""PlayerInput"",
  ""maps"": [
    {
      ""name"": ""OnFoot"",
      ""id"": ""fcf7d735-980f-4a6f-9b17-48afc32ad431"",
      ""actions"": [
        {
          ""name"": ""Movement"",
          ""type"": ""Value"",
          ""id"": ""b8f421f1-8c86-4ecb-846b-4f3eb97ab389"",
          ""expectedControlType"": ""Vector2"",
          ""processors"": [],
          ""interactions"": [],
          ""initialStateCheck"": true
        },
        {
          ""name"": ""Jump"",
          ""type"": ""Button"",
          ""id"": ""17665a2c-4e6b-47b9-9500-448a89248405"",
          ""expectedControlType"": ""Button"",
          ""processors"": [],
          ""interactions"": [],
          ""initialStateCheck"": false
        },
        {
          ""name"": ""Look"",
          ""type"": ""Value"",
          ""id"": ""00c98f1d-10bc-4b00-9fef-e796650a42f3"",
          ""expectedControlType"": ""Vector2"",
          ""processors"": [],
          ""interactions"": [],
          ""initialStateCheck"": true
        }
      ],
      ""bindings"": [
        {
          ""name"": ""WASD"",
          ""id"": ""30928f58-48ee-4116-ae8d-e9a2fc23589b"",
          ""path"": ""2DVector"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Movement"",
          ""isComposite"": true,
          ""isPartOfComposite"": false
        },
        {
          ""name"": ""up"",
          ""id"": ""6f8f69c1-a356-49bd-bd2e-78f5ebef45e0"",
          ""path"": ""<Keyboard>/w"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Movement"",
          ""isComposite"": false,
          ""isPartOfComposite"": true
        },
        {
          ""name"": ""down"",
          ""id"": ""ec8acd89-22f8-47da-8a08-9032b01ad599"",
          ""path"": ""<Keyboard>/s"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Movement"",
          ""isComposite"": false,
          ""isPartOfComposite"": true
        },
        {
          ""name"": ""left"",
          ""id"": ""58fce1e2-4d94-499a-8720-dcb11b248e18"",
          ""path"": ""<Keyboard>/a"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Movement"",
          ""isComposite"": false,
          ""isPartOfComposite"": true
        },
        {
          ""name"": ""right"",
          ""id"": ""1c3c0490-d6c1-4360-9f2e-e37d39c9ccf1"",
          ""path"": ""<Keyboard>/d"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Movement"",
          ""isComposite"": false,
          ""isPartOfComposite"": true
        },
        {
          ""name"": """",
          ""id"": ""0c8f397c-504a-4f20-aa0a-9999eb333138"",
          ""path"": ""<Keyboard>/space"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Jump"",
          ""isComposite"": false,
          ""isPartOfComposite"": false
        },
        {
          ""name"": """",
          ""id"": ""aba5e03c-a5ba-48ac-8093-856273351388"",
          ""path"": ""<Mouse>/delta"",
          ""interactions"": [],
          ""processors"": [],
          ""groups"": [],
          ""action"": ""Look"",
          ""isComposite"": false,
          ""isPartOfComposite"": false
        }
      ],
      ""controlSchemes"": []
    }
  ],
  ""controlSchemes"": []
}
");
        // OnFoot
        m_OnFoot = asset.FindActionMap("OnFoot", throwIfNotFound: true);
        m_OnFoot_Movement = m_OnFoot.FindAction("Movement", throwIfNotFound: true);
        m_OnFoot_Jump = m_OnFoot.FindAction("Jump", throwIfNotFound: true);
        m_OnFoot_Look = m_OnFoot.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnFoot
    private readonly InputActionMap m_OnFoot;
    private List<IOnFootActions> m_OnFootActionsCallbackInterfaces = new List<IOnFootActions>();
    private readonly InputAction m_OnFoot_Movement;
    private readonly InputAction m_OnFoot_Jump;
    private readonly InputAction m_OnFoot_Look;
    public struct OnFootActions
    {
        private @PlayerInput m_Wrapper;
        public OnFootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OnFoot_Movement;
        public InputAction @Jump => m_Wrapper.m_OnFoot_Jump;
        public InputAction @Look => m_Wrapper.m_OnFoot_Look;
        public InputActionMap Get() { return m_Wrapper.m_OnFoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnFootActions set) { return set.Get(); }
        public void AddCallbacks(IOnFootActions instance)
        {
            if (instance == null || m_Wrapper.m_OnFootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IOnFootActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IOnFootActions instance)
        {
            if (m_Wrapper.m_OnFootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnFootActions instance)
        {
            foreach (var item in m_Wrapper.m_OnFootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnFootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnFootActions @OnFoot => new OnFootActions(this);
    public interface IOnFootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
